---
export interface Props {
    user: {
        id: number;
        username: string;
        name: string;
        email: string;
        avatar: string;
        age: number;
        gender: string;
        fechaNacimiento: string;
        memberSince: string;
        vipStatus: boolean;
        eventsAttended: number;
        favoriteGenres: string[];
        upcomingEvents: any[];
        pastEvents: any[];
        preferences: {
            notifications: boolean;
            newsletter: boolean;
            publicProfile: boolean;
        };
    };
}

const { user } = Astro.props;
---

<section class="user-profile">
    <div class="container">
        <!-- Profile Header -->
        <div class="profile-header">
            <div class="profile-cover">
                <div class="cover-overlay"></div>
            </div>
            <div class="profile-info">
                <div class="avatar-section">
                    <img src={user.avatar || "/placeholder.svg"} alt={user.name} class="profile-avatar">
                    {user.vipStatus && <span class="vip-badge">👑 VIP</span>}
                </div>
                <div class="user-details">
                    <h1 class="user-name">{user.name}</h1>
                    <p class="user-username">@{user.username}</p>
                    <p class="member-since">Miembro desde {user.memberSince}</p>
                </div>
            </div>
        </div>

        <!-- Profile Navigation -->
        <div class="profile-nav">
            <button class="nav-tab active" data-tab="info">Información</button>
            <button class="nav-tab" data-tab="events">Eventos</button>
            <button class="nav-tab" data-tab="preferences">Preferencias</button>
        </div>

        <!-- Profile Content -->
        <div class="profile-content">
            <!-- Info Tab -->
            <div class="tab-content active" id="info-tab">
                <div class="info-grid">
                    <div class="info-card">
                        <h3 class="card-title">Información Personal</h3>
                        <div class="info-items">
                            <div class="info-item">
                                <span class="info-label">Nombre:</span>
                                <span class="info-value">{user.name}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Email:</span>
                                <span class="info-value">{user.email}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Edad:</span>
                                <span class="info-value">{user.age} años</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Género:</span>
                                <span class="info-value">{user.gender}</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Fecha de Nacimiento:</span>
                                <span class="info-value">{user.fechaNacimiento}</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <h3 class="card-title">Estadísticas</h3>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <span class="stat-number">{user.eventsAttended}</span>
                                <span class="stat-label">Eventos Asistidos</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{user.vipStatus ? 'VIP' : 'Regular'}</span>
                                <span class="stat-label">Estado</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-number">{user.favoriteGenres.length}</span>
                                <span class="stat-label">Géneros Favoritos</span>
                            </div>
                        </div>
                    </div>

                    <div class="info-card">
                        <h3 class="card-title">Géneros Musicales Favoritos</h3>
                        <div class="genres-list">
                            {user.favoriteGenres.map((genre) => (
                                <span class="genre-tag">{genre}</span>
                            ))}
                        </div>
                    </div>
                </div>
            </div>

            <!-- Events Tab -->
            <div class="tab-content" id="events-tab">
                <div class="events-section">
                    <h3 class="section-title">Próximos Eventos</h3>
                    <div class="events-grid">
                        {user.upcomingEvents.length > 0 ? (
                            user.upcomingEvents.map((event) => (
                                <div class="event-item">
                                    <img src={event.image || "/placeholder.svg"} alt={event.title} class="event-image">
                                    <div class="event-info">
                                        <h4 class="event-title">{event.title}</h4>
                                        <p class="event-date">{event.date}</p>
                                        <p class="event-artist">{event.artist}</p>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <p class="no-events">No tienes eventos próximos</p>
                        )}
                    </div>
                </div>

                <div class="events-section">
                    <h3 class="section-title">Eventos Pasados</h3>
                    <div class="events-grid">
                        {user.pastEvents.length > 0 ? (
                            user.pastEvents.map((event) => (
                                <div class="event-item past">
                                    <img src={event.image || "/placeholder.svg"} alt={event.title} class="event-image">
                                    <div class="event-info">
                                        <h4 class="event-title">{event.title}</h4>
                                        <p class="event-date">{event.date}</p>
                                        <p class="event-artist">{event.artist}</p>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <p class="no-events">No has asistido a eventos aún</p>
                        )}
                    </div>
                </div>
            </div>

            <!-- Preferences Tab -->
            <div class="tab-content" id="preferences-tab">
                <div class="preferences-form">
                    <h3 class="section-title">Configuración de Cuenta</h3>
                    <div class="preference-item">
                        <label class="preference-label">
                            <input type="checkbox" checked={user.preferences.notifications}>
                            <span class="checkmark"></span>
                            Recibir notificaciones de eventos
                        </label>
                    </div>
                    <div class="preference-item">
                        <label class="preference-label">
                            <input type="checkbox" checked={user.preferences.newsletter}>
                            <span class="checkmark"></span>
                            Suscribirse al newsletter
                        </label>
                    </div>
                    <div class="preference-item">
                        <label class="preference-label">
                            <input type="checkbox" checked={user.preferences.publicProfile}>
                            <span class="checkmark"></span>
                            Perfil público
                        </label>
                    </div>
                    <button class="btn btn-save">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .user-profile {
        padding: 2rem 0;
        color: white;
        min-height: 100vh;
    }

    .profile-header {
        position: relative;
        margin-bottom: 2rem;
    }

    .profile-cover {
        height: 200px;
        background: linear-gradient(45deg, #ff0080, #7928ca);
        border-radius: 16px;
        position: relative;
        overflow: hidden;
    }

    .cover-overlay {
        position: absolute;
        inset: 0;
        background: linear-gradient(135deg, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.6));
    }

    .profile-info {
        position: absolute;
        bottom: -50px;
        left: 2rem;
        display: flex;
        align-items: end;
        gap: 2rem;
    }

    .avatar-section {
        position: relative;
    }

    .profile-avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        border: 4px solid white;
        object-fit: cover;
    }

    .vip-badge {
        position: absolute;
        top: -10px;
        right: -10px;
        background: linear-gradient(45deg, #ffd700, #ffed4e);
        color: #000;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .user-details {
        padding-bottom: 1rem;
    }

    .user-name {
        font-size: 2rem;
        font-weight: 900;
        margin-bottom: 0.5rem;
    }

    .user-username {
        color: rgba(255, 255, 255, 0.7);
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
    }

    .member-since {
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.9rem;
    }

    .profile-nav {
        display: flex;
        gap: 1rem;
        margin: 4rem 0 2rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .nav-tab {
        background: none;
        border: none;
        color: rgba(255, 255, 255, 0.7);
        padding: 1rem 2rem;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        border-bottom: 2px solid transparent;
    }

    .nav-tab.active,
    .nav-tab:hover {
        color: #ff0080;
        border-bottom-color: #ff0080;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
    }

    .info-card {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        padding: 2rem;
    }

    .card-title {
        font-size: 1.3rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: #ff0080;
    }

    .info-items {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .info-label {
        color: rgba(255, 255, 255, 0.7);
        font-weight: 500;
    }

    .info-value {
        color: white;
        font-weight: 600;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
    }

    .stat-item {
        text-align: center;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
    }

    .stat-number {
        display: block;
        font-size: 1.5rem;
        font-weight: 900;
        color: #ff0080;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
    }

    .genres-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .genre-tag {
        background: linear-gradient(45deg, #ff0080, #7928ca);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .events-section {
        margin-bottom: 3rem;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: #ff0080;
    }

    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .event-item {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s ease;
    }

    .event-item:hover {
        transform: translateY(-4px);
    }

    .event-item.past {
        opacity: 0.7;
    }

    .event-image {
        width: 100%;
        height: 120px;
        object-fit: cover;
    }

    .event-info {
        padding: 1rem;
    }

    .event-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #ff0080;
    }

    .event-date,
    .event-artist {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.7);
        margin-bottom: 0.25rem;
    }

    .no-events {
        color: rgba(255, 255, 255, 0.6);
        text-align: center;
        padding: 2rem;
        font-style: italic;
    }

    .preferences-form {
        max-width: 500px;
    }

    .preference-item {
        margin-bottom: 1.5rem;
    }

    .preference-label {
        display: flex;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
        font-size: 1.1rem;
    }

    .preference-label input[type="checkbox"] {
        display: none;
    }

    .checkmark {
        width: 20px;
        height: 20px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 4px;
        position: relative;
        transition: all 0.3s ease;
    }

    .preference-label input[type="checkbox"]:checked + .checkmark {
        background: linear-gradient(45deg, #ff0080, #7928ca);
        border-color: #ff0080;
    }

    .preference-label input[type="checkbox"]:checked + .checkmark::after {
        content: '✓';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-weight: bold;
    }

    .btn-save {
        background: linear-gradient(45deg, #ff0080, #7928ca);
        color: white;
        border: none;
        padding: 1rem 2rem;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 2rem;
    }

    .btn-save:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(255, 0, 128, 0.4);
    }

    @media (max-width: 768px) {
        .profile-info {
            flex-direction: column;
            align-items: center;
            text-align: center;
            position: static;
            margin-top: 2rem;
        }

        .profile-nav {
            flex-direction: column;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .events-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const tabs = document.querySelectorAll('.nav-tab');
        const contents = document.querySelectorAll('.tab-content');

        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const targetTab = tab.getAttribute('data-tab');
                
                // Remove active class from all tabs and contents
                tabs.forEach(t => t.classList.remove('active'));
                contents.forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab and corresponding content
                tab.classList.add('active');
                document.getElementById(`${targetTab}-tab`).classList.add('active');
            });
        });
    });
</script>
